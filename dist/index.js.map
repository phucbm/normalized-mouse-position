{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import {NormalizedMousePosition, NormalizedMousePositionOptions} from \"./types\";\n\n/**\n * Converts mouse coordinates to normalized values relative to a configurable origin point.\n *\n * This function takes raw mouse coordinates and normalizes them to a [-1, 1] range\n * (or beyond if clamp is disabled), with the normalization relative to a specified\n * origin point rather than always using the center.\n *\n * @param options - Configuration object containing mouse position and normalization options\n * @returns Normalized mouse position with x, y coordinates and origin information\n */\nexport function getNormalizedMousePosition({\n                                               x,\n                                               y,\n                                               origin = \"50% 50%\",\n                                               target = window,\n                                               clamp = true,\n                                               invertX = false,\n                                               invertY = false\n                                           }: NormalizedMousePositionOptions): NormalizedMousePosition {\n    // Parse origin string (e.g., \"50% 50%\" or \"0 100%\")\n    const [originXStr, originYStr] = origin.split(' ');\n\n    // Convert percentage strings to decimal values\n    const originX = parseFloat(originXStr.replace('%', '')) / 100;\n    const originY = parseFloat(originYStr.replace('%', '')) / 100;\n\n    // Get target dimensions\n    const isWindow = (target as any) === window;\n    const targetWidth = isWindow ? window.innerWidth : (target as unknown as HTMLElement).offsetWidth;\n    const targetHeight = isWindow ? window.innerHeight : (target as unknown as HTMLElement).offsetHeight;\n\n    // Calculate the origin point in absolute coordinates\n    const originPointX = targetWidth * originX;\n    const originPointY = targetHeight * originY;\n\n    // Calculate distance from origin to edges\n    const maxDistanceX = Math.max(originPointX, targetWidth - originPointX);\n    const maxDistanceY = Math.max(originPointY, targetHeight - originPointY);\n\n    // Calculate normalized position relative to origin\n    let normalizedX = (x - originPointX) / maxDistanceX;\n    let normalizedY = (y - originPointY) / maxDistanceY;\n\n    // Apply inversions if requested\n    if (invertX) normalizedX = -normalizedX;\n    if (invertY) normalizedY = -normalizedY;\n\n    // Apply clamping if requested\n    if (clamp) {\n        normalizedX = Math.max(-1, Math.min(1, normalizedX));\n        normalizedY = Math.max(-1, Math.min(1, normalizedY));\n    }\n\n    return {\n        x: normalizedX,\n        y: normalizedY,\n        origin: {\n            x: originX,\n            y: originY\n        },\n        size: {\n            width: targetWidth,\n            height: targetHeight\n        }\n    };\n}"],"mappings":";;;;;;;AAYO,SAASA,EAA2B,CACI,EAAAC,EACA,EAAAC,EACA,OAAAC,EAAS,UACT,OAAAC,EAAS,OACT,MAAAC,EAAQ,GACR,QAAAC,EAAU,GACV,QAAAC,EAAU,EACd,EAA4D,CAEnG,GAAM,CAACC,EAAYC,CAAU,EAAIN,EAAO,MAAM,GAAG,EAG3CO,EAAU,WAAWF,EAAW,QAAQ,IAAK,EAAE,CAAC,EAAI,IACpDG,EAAU,WAAWF,EAAW,QAAQ,IAAK,EAAE,CAAC,EAAI,IAGpDG,EAAYR,IAAmB,OAC/BS,EAAcD,EAAW,OAAO,WAAcR,EAAkC,YAChFU,EAAeF,EAAW,OAAO,YAAeR,EAAkC,aAGlFW,EAAeF,EAAcH,EAC7BM,EAAeF,EAAeH,EAG9BM,EAAe,KAAK,IAAIF,EAAcF,EAAcE,CAAY,EAChEG,EAAe,KAAK,IAAIF,EAAcF,EAAeE,CAAY,EAGnEG,GAAelB,EAAIc,GAAgBE,EACnCG,GAAelB,EAAIc,GAAgBE,EAGvC,OAAIZ,IAASa,EAAc,CAACA,GACxBZ,IAASa,EAAc,CAACA,GAGxBf,IACAc,EAAc,KAAK,IAAI,GAAI,KAAK,IAAI,EAAGA,CAAW,CAAC,EACnDC,EAAc,KAAK,IAAI,GAAI,KAAK,IAAI,EAAGA,CAAW,CAAC,GAGhD,CACH,EAAGD,EACH,EAAGC,EACH,OAAQ,CACJ,EAAGV,EACH,EAAGC,CACP,EACA,KAAM,CACF,MAAOE,EACP,OAAQC,CACZ,CACJ,CACJ","names":["getNormalizedMousePosition","x","y","origin","target","clamp","invertX","invertY","originXStr","originYStr","originX","originY","isWindow","targetWidth","targetHeight","originPointX","originPointY","maxDistanceX","maxDistanceY","normalizedX","normalizedY"]}